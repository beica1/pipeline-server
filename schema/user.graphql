scalar Date
scalar Gender
scalar ExpiredType

type User {
  userId: ID!
  roles: [Role]!
  name: String!
  avatar: String
  gender: Gender
  regTime: Date
  groups: [Group]
  tasks: [Task]
  expiredIn: Date
}

input UserFilter {
  roleId: ID
  groupId: ID
}

extend type Query {
  me: User
  user(userId: ID!): User
  users(filter: UserFilter): [User]!
}

input InputUser {
  name: String!
  roles: [ID]!
  groups: [ID]!
  expiredIn: Date
}

extend type Mutation {
  login(user: String!, pwd: String!): User!
  auth(code: String!): User!
  addUser(user: InputUser!): ID!
  updateUser(userId: ID!, user: InputUser!): ID!
  removeUser(userId: ID!): ID!
}
